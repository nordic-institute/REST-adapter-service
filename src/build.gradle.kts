/*
 * This file was generated by the Gradle 'init' task.
 */


import java.util.Properties;

plugins {   
    `java-library`
    `application`
    `maven-publish`
    java
    // id("org.springframework.boot") version "3.4.4"    
    // id("io.spring.dependency-management")
    
}


application {
	mainClass.set("com.example.ExampleApplication")
}


ext {
    set("xrd4j.version", "0.6.0")
    set("java.version", "21")
    set("jdk.version", "21")
    set("xmlunit.version", "2.7.0")
    set("failsafe.version", "2.19.1")
    set("project.build.sourceEncoding", "UTF-8")
    set("project.build.resourceEncoding", "UTF-8")
    set("project.reporting.outputEncoding", "UTF-8")
    set("tomcat.version", "9.0.37")
    set("app.home", "/var/lib/tomcat/webapps")
    // set("sonar.junit.reportPaths", "target/failsafe-reports,target/surefire-reports")
    set("server.port","9898")
}

// repositories {
//     flatDir {
//         dirs("$projectDir/../../xrd4j/src/build/common/build/libs") 
//         dirs("$projectDir/../../xrd4j/src/build/client/build/libs") 
//         dirs("$projectDir/../../xrd4j/src/build/server/build/libs") 
//         dirs("$projectDir/../../xrd4j/src/build/rest/build/libs") 
//     }
// }

dependencies {
    implementation(libs.org.springframework.boot.spring.boot.starter.web) 
    implementation(libs.org.springframework.boot.spring.boot.starter.aop)
    implementation(libs.org.springframework.boot.spring.boot.starter.tomcat)
    implementation("org.projectlombok:lombok:1.18.30")
    annotationProcessor("org.projectlombok:lombok:1.18.30")
    // implementation(files("$projectDir/../../xrd4j/src/common/build/libs/common-0.7.0-SNAPSHOT.jar"))
    // implementation(files("$projectDir/../../xrd4j/src/client/build/libs/client-0.7.0-SNAPSHOT.jar"))
    // implementation(files("$projectDir/../../xrd4j/src/rest/build/libs/rest-0.7.0-SNAPSHOT.jar"))
    // implementation(files("$projectDir/../../xrd4j/src/server/build/libs/server-0.7.0-SNAPSHOT.jar"))
    // implementation("com.springsource.javax.xml.soap:com.springsource.javax.xml.soap:1.3.0")

    // implementation(files("$projectDir/../../xrd4j/src/common/build/libs/common-0.7.0-SNAPSHOT-sources.jar"))
    // implementation(files("$projectDir/../../xrd4j/src/client/build/libs/client-0.7.0-SNAPSHOT-sources.jar"))
    // implementation(files("$projectDir/../../xrd4j/src/rest/build/libs/rest-0.7.0-SNAPSHOT-sources.jar"))
    // implementation(files("$projectDir/../../xrd4j/src/server/build/libs/server-0.7.0-SNAPSHOT-sources.jar"))
    implementation("org.niis.xrd4j:common:0.6.0")
    implementation("org.niis.xrd4j:client:0.6.0")
    implementation("org.niis.xrd4j:server:0.6.0")
    implementation("org.niis.xrd4j:rest:0.6.0")

    implementation(libs.org.xmlunit.xmlunit.assertj) {
        constraints {
            implementation("org.assertj:assertj-core:3.16.1")
            implementation("net.bytebuddy:byte-buddy:1.10.5")
        }
    }
    implementation("jakarta.xml.soap:jakarta.xml.soap-api:3.0.0")
    testImplementation(libs.org.springframework.boot.spring.boot.starter.test) {
        exclude (group= "com.vaadin.external.google", module= "android-json")
    }
    testImplementation(libs.org.apache.tomcat.embed.tomcat.embed.jasper)
    testImplementation(libs.com.github.tomakehurst.wiremock)
    testImplementation(libs.commons.io.commons.io)
    testImplementation(libs.com.github.stefanbirkner.system.rules)
    testImplementation(libs.org.skyscreamer.jsonassert) {
        exclude (group = "com.vaadin.external.google", module = "android-json")
    }
    testImplementation(libs.org.xmlunit.xmlunit.core)
    testImplementation(libs.org.xmlunit.xmlunit.matchers)
    testImplementation(libs.com.jayway.jsonpath.json.path.assert)
    testImplementation(libs.com.jayway.jsonpath.json.path)
    testAnnotationProcessor(libs.org.projectlombok.lombok)

}

group = "org.niis"
version = "1.1.0-SNAPSHOT"
description = "REST Adapter Service"
// java.sourceCompatibility = JavaVersion.VERSION_1_8

publishing {
    publications {
        create<MavenPublication>("rest-adaper-service-extension") {
            from(components["java"])

            pom {
                licenses {
                    license {
                        name.set("MIT License")
                        url.set("http://www.opensource.org/licenses/mit-license.php")
                    }
                }
                scm {
                    connection.set("scm:git:git@github.com:nordic-institute/REST-adapter-service.git")
                    developerConnection.set("scm:git:git@github.com:nordic-institute/REST-adapter-service.git")
                    url.set("https://github.com/nordic-institute/REST-adapter-service.git")
                }
                developers {
                    developer {
                        id.set("niis")
                        name.set("Nordic Institute for Interoperability Solutions (NIIS)")
                        roles.set(listOf("architect", "developer"))
                        timezone.set("+2")
                    }
                    developer {
                        id.set("vrk")
                        name.set("Population Register Centre (VRK)")
                        roles.set(listOf("architect", "developer"))
                        timezone.set("+2")
                    }
                    developer {
                        id.set("petkivim")
                        name.set("Petteri Kivim√§ki")
                        roles.set(listOf("architect", "developer"))
                        timezone.set("+2")
                    }
                }
            }
        }
    }
}

tasks.withType<JavaCompile>() {
    options.encoding = "UTF-8"
    options.annotationProcessorPath = configurations.annotationProcessor.get()

}

tasks.withType<Javadoc>() {
    options.encoding = "UTF-8"
}


tasks.test {
    useJUnitPlatform()
  
    exclude("org/niis/xroad/restadapterservice/ConsumerGatewayIT.class")

    // Create a Properties object
    val extProgram = Properties()

    // Load the properties file
    extProgram.load(file("${project.projectDir}/src/test/resources/application-test-properties/provider-gateway.properties").inputStream())
    extProgram.load(file("${project.projectDir}/src/test/resources/application-test-properties/providers.properties").inputStream())
    extProgram.load(file("${project.projectDir}/src/test/resources/application-test-properties/consumer-gateway.properties").inputStream())
    extProgram.load(file("${project.projectDir}/src/test/resources/application-test-properties/consumers.properties").inputStream())

    // Access properties
    println("privateKeyAlias: ${extProgram["privateKeyAlias"]}")
    println("publicKeyFile: ${extProgram["publicKeyFile"]}")

}

tasks.processTestResources {
    // Include and filter `application-test-properties/*`
    filesMatching("application-test-properties/*") {
        expand(project.properties) // Enable filtering
    }
    // // Include `application-test-keys/*` without filtering
    // filesMatching("application-test-keys/*") {
    //     expand(project.properties) 
    // }
    
        

    // // Include `application-test-keys/*` without filtering
    // filesMatching("application-test-keys/*") {
    //     filteringCharset = null // Disable filtering
    // }

    // Exclude `application-test-properties/*` and `application-test-keys/*` from other resources
    // exclude("application-test-properties/*", "application-test-keys/*")
    // from("src/test/ressources/application-test-properties") {
    //     include("**/*.properties")
    // }
    // info("$buildDir/resources/test/application-test-")
}

tasks.jar {
    archiveBaseName.set("rest-adapter-service")
    manifest {
        attributes["Main-Class"] = "org.niis.xroad.restadapterservice.Application"
    }
    // mainClass.set("org.niis.xroad.restadapterservice.Application")

    // archiveBaseName.set("my-kotlin-app")
    // archiveVersion.set(project.version.toString())

    // // Include compiled classes and resources
    // from(sourceSets.main.get().output)
}
